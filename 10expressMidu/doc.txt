Desarrollado siguiento del vídeo de Midudev:
https://www.youtube.com/watch?v=ZpY5KdGQvwI&t=3809s

npm init -y 
npm install typescript -D

En el package.json:
    Crear un script para typescript:
    "scripts": {
        "tsc": "tsc"
    },

    Ejecutamos el script:
    npm run tsc -- --init

    configuramos el tsconfig.json

Instalción de dependencias:
    npm install express -E  --> La -E hace refercencia a una copia exacta.

Creamos el directorio:
    /source

Y en el interior el archivo:
    /source/index.ts

Solucioando el error:
    import express from 'express'  --> No reconoce express y es por el tipado. Hay que descargar un tipo.

    npm i @types/express -D

Probando que compila sin errores
    npm run tsc

Creamos el escript para inicializar el servidor:
    "start": "node build/index.js" --> Se accede con: npm start

Instalamos para automatización en el guardado:
    npm install ts-node-dev -D

    Creamos un escript para automatizar el guardado y reinicio del servidor cada vez que guardamos un archivo:
        "dev": "ts-node-dev source/index.ts" --> Se accede con npm run dev

Creamos el directorio routes:
    /routes

    Y dentro el archivo:
    /routes/diaries.ts

    En diaries.ts creamos el router y dos end-points básicos que iremos modificando:

        import express from 'express'
        const router = express.Router()

        router.get('/', (req, res) => {
        })

        router.post('/', (req, res) => {
        })

        export default router

Volvemos a index.ts e importamos el router, luego indicamos donde lo queremos usar:
    import diaryRouter from './routes/diaries'
    app.use('/api/diaries', diaryRouter)

Creamos la siguiente carpeta y archivos para separar la lógica:
    /services
        diary.json
        diatyServices.ts

Instalamos ts-standar para controlar fallos de ; de tabulaciones etc. Es como una especie de eslint...
    npm install ts-standard -D

    Creamos el script en package.json
    "lint": "ts-standard",

    Ejecutamos:
    npm run lint

    Para que además nos muestre en el documento los posibles errores a parte de en el el terminal debemos añadir un eslintconfig al package.json
    (siempre con ese nobre ya que es el que busca node):
    
    "eslintConfig": {
        "parserOptions": {
            "project": "./tsconfig.json"
            },
        "extendes": "./node_modules/ts-satandard/eslintrc.json"
    }

Usamos Thunder Client para probar las peticiones get y post